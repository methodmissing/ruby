#define PROBE_EVALSTR_BEGIN(self) do {\
  if (RUBY_EVALSTR_BEGIN_ENABLED())\
   RUBY_EVALSTR_BEGIN((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EVALSTR_END(self) do {\
  if (RUBY_EVALSTR_END_ENABLED())\
   RUBY_EVALSTR_END((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EVAL_BEGIN(PROBE,self) do {\
  if (RUBY_##PROBE##_EVAL_BEGIN_ENABLED())\
   RUBY_##PROBE##_EVAL_BEGIN((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EVAL_END(PROBE,self) do {\
  if (RUBY_##PROBE##_EVAL_END_ENABLED())\
   RUBY_##PROBE##_EVAL_END((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EXEC_BEGIN(PROBE,self) do {\
  if (RUBY_##PROBE##_EXEC_BEGIN_ENABLED())\
   RUBY_##PROBE##_EXEC_BEGIN((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EXEC_END(PROBE,self) do {\
  if (RUBY_##PROBE##_EXEC_END_ENABLED())\
   RUBY_##PROBE##_EXEC_END((char*)rb_obj_classname(self));\
} while (0)

#define PROBE_SEND_BEGIN() PROBE_BEGIN(SEND)
#define PROBE_SEND_END() PROBE_END(SEND)
#define PROBE_BLOCK_GIVEN_BEGIN() PROBE_BEGIN(BLOCK_GIVEN)
#define PROBE_BLOCK_GIVEN_END() PROBE_END(BLOCK_GIVEN)
#define PROBE_CATCH_BEGIN() PROBE_BEGIN(CATCH)
#define PROBE_CATCH_END() PROBE_END(CATCH)
#define PROBE_THROW_BEGIN() PROBE_BEGIN(THROW)
#define PROBE_THROW_END() PROBE_END(THROW)
#define PROBE_CALLER_BEGIN() PROBE_BEGIN(CALLER)
#define PROBE_CALLER_END() PROBE_END(CALLER)
#define PROBE_METHOD_CALL_BEGIN(obj,id) PROBE_OBJECT_AND_ID_BEGIN(METHOD_CALL,obj,id)
#define PROBE_METHOD_CALL_END(obj,id) PROBE_OBJECT_AND_ID_END(METHOD_CALL,obj,id)
#define PROBE_SUPER_BEGIN() PROBE_BEGIN(SUPER)
#define PROBE_SUPER_END() PROBE_END(SUPER)
#define PROBE_METHOD_MISSING_BEGIN() PROBE_BEGIN(METHOD_MISSING)
#define PROBE_METHOD_MISSING_END() PROBE_END(METHOD_MISSING)
#define PROBE_YIELD_BEGIN() PROBE_BEGIN(YIELD)
#define PROBE_YIELD_END() PROBE_END(YIELD)
#define PROBE_LOOP_BEGIN() PROBE_BEGIN(LOOP)
#define PROBE_LOOP_END() PROBE_END(LOOP)
#define PROBE_BLOCK_CALL_BEGIN(obj,id) PROBE_OBJECT_AND_ID_BEGIN(BLOCK_CALL,obj,id)
#define PROBE_BLOCK_CALL_END(obj,id) PROBE_OBJECT_AND_ID_END(BLOCK_CALL,obj,id)