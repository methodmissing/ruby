#define PROBE_EVALSTR_ENTRY(self) do {\
  if (RUBY_EVALSTR_ENTRY_ENABLED())\
   RUBY_EVALSTR_ENTRY((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EVALSTR_RETURN(self) do {\
  if (RUBY_EVALSTR_RETURN_ENABLED())\
   RUBY_EVALSTR_RETURN((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EVAL_ENTRY(PROBE,self) do {\
  if (RUBY_##PROBE##_EVAL_ENTRY_ENABLED())\
   RUBY_##PROBE##_EVAL_ENTRY((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EVAL_RETURN(PROBE,self) do {\
  if (RUBY_##PROBE##_EVAL_RETURN_ENABLED())\
   RUBY_##PROBE##_EVAL_RETURN((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EXEC_ENTRY(PROBE,self) do {\
  if (RUBY_##PROBE##_EXEC_ENTRY_ENABLED())\
   RUBY_##PROBE##_EXEC_ENTRY((char*)rb_obj_classname(self));\
} while (0)
#define PROBE_EXEC_RETURN(PROBE,self) do {\
  if (RUBY_##PROBE##_EXEC_RETURN_ENABLED())\
   RUBY_##PROBE##_EXEC_RETURN((char*)rb_obj_classname(self));\
} while (0)

#define PROBE_SEND_ENTRY() PROBE_ENTRY(SEND)
#define PROBE_SEND_RETURN() PROBE_RETURN(SEND)
#define PROBE_BLOCK_GIVEN_ENTRY() PROBE_ENTRY(BLOCK_GIVEN)
#define PROBE_BLOCK_GIVEN_RETURN() PROBE_RETURN(BLOCK_GIVEN)
#define PROBE_CATCH_ENTRY() PROBE_ENTRY(CATCH)
#define PROBE_CATCH_RETURN() PROBE_RETURN(CATCH)
#define PROBE_THROW_ENTRY() PROBE_ENTRY(THROW)
#define PROBE_THROW_RETURN() PROBE_RETURN(THROW)
#define PROBE_CALLER_ENTRY() PROBE_ENTRY(CALLER)
#define PROBE_CALLER_RETURN() PROBE_RETURN(CALLER)
#define PROBE_METHOD_CALL_ENTRY(obj,id) PROBE_OBJECT_AND_ID_ENTRY(METHOD_CALL,obj,id)
#define PROBE_METHOD_CALL_RETURN(obj,id) PROBE_OBJECT_AND_ID_RETURN(METHOD_CALL,obj,id)
#define PROBE_SUPER_ENTRY() PROBE_ENTRY(SUPER)
#define PROBE_SUPER_RETURN() PROBE_RETURN(SUPER)
#define PROBE_METHOD_MISSING_ENTRY() PROBE_ENTRY(METHOD_MISSING)
#define PROBE_METHOD_MISSING_RETURN() PROBE_RETURN(METHOD_MISSING)
#define PROBE_YIELD_ENTRY() PROBE_ENTRY(YIELD)
#define PROBE_YIELD_RETURN() PROBE_RETURN(YIELD)
#define PROBE_LOOP_ENTRY() PROBE_ENTRY(LOOP)
#define PROBE_LOOP_RETURN() PROBE_RETURN(LOOP)
#define PROBE_BLOCK_CALL_ENTRY(obj,id) PROBE_OBJECT_AND_ID_ENTRY(BLOCK_CALL,obj,id)
#define PROBE_BLOCK_CALL_RETURN(obj,id) PROBE_OBJECT_AND_ID_RETURN(BLOCK_CALL,obj,id)