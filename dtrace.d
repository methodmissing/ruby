provider ruby {
    probe str__set__length__entry(char *, int);
    probe str__set__length__return(char *, int);
    probe str__dec__length__entry(char *);
    probe str__dec__length__return(char *);
    probe str__resize__capacity__entry(char *, int);
    probe str__resize__capacity__return(char *, int);
    probe str__replace__entry(char *, char *);
    probe str__replace__return(char *, char *);
    probe str__shared__replace__entry(char *, char *);
    probe str__shared__replace__return(char *, char *);
    probe str__buf__new__entry(int);
    probe str__buf__new__return(int);
    probe str__buf__cstr__new__entry(char *);
    probe str__buf__cstr__new__return(char *);
    probe str__new__entry(char *, int);
    probe str__new__return(char *, int);
    probe str__new__shared__entry(char *);
    probe str__new__shared__return(char *);    
    probe str__free__entry(char *);
    probe str__free__return(char *);
    probe str__dup__entry(char *);
    probe str__dup__return(char *);

    probe evalstr__entry(char *obj);
    probe evalstr__return(char *obj);
    probe instance__eval__entry(char *klass);
    probe instance__eval__return(char *klass);
    probe instance__exec__entry(char *klass);
    probe instance__exec__return(char *klass);
    probe module__eval__entry(char *klass);
    probe module__eval__return(char *klass);
    probe module__exec__entry(char *klass);
    probe module__exec__return(char *klass);
    probe send__entry();
    probe send__return();
    probe caller__entry();
    probe caller__return();
    probe block__given__entry();
    probe block__given__return();
    probe catch__entry();
    probe catch__return();
    probe throw__entry();
    probe throw__return();
    probe method__call__entry(char *klass, char *method);
    probe method__call__return(char *klass, char *method);
    probe super__entry();
    probe super__return();
    probe method__missing__entry();
    probe method__missing__return();
    probe yield__entry();
    probe yield__return();
    probe loop__entry();
    probe loop__return();
    probe block__call__entry(char *klass, char *method);
    probe block__call__return(char *klass, char *method);

    probe mt__clear__cache__entry();
    probe mt__clear__cache__return();
    probe mt__clear__cache__undef__entry(char *klass, char *method);
    probe mt__clear__cache__undef__return(char *klass, char *method);
    probe mt__clear__cache__id__entry(char *method);
    probe mt__clear__cache__id__return(char *method);
    probe mt__clear__cache__class__entry(char *klass);
    probe mt__clear__cache__class__return(char *klass);
    probe mt__add__method__entry(char *klass, char *method);
    probe mt__add__method__return(char *klass, char *method);
    probe mt__remove__method__entry(char *klass, char *method);
    probe mt__remove__method__return(char *klass, char *method);
    probe mt__get__method__entry__entry(char *klass, char *method);
    probe mt__get__method__entry__return(char *klass, char *method);
    probe mt__method__entry__entry(char *klass, char *method);
    probe mt__method__entry__return(char *klass, char *method);

    probe vm__change__state__entry(int v);
    probe vm__change__state__return(int v);

    probe st__init__numtable__entry();
    probe st__init__numtable__return();
    probe st__init__sized__numtable__entry(int size);
    probe st__init__sized__numtable__return(int size);
    probe st__init__strtable__entry();
    probe st__init__strtable__return();
    probe st__init__sized__strtable__entry(int size);
    probe st__init__sized__strtable__return(int size);
    probe st__init__strcasetable__entry();
    probe st__init__strcasetable__return();
    probe st__init__sized__strcasetable__entry(int size);
    probe st__init__sized__strcasetable__return(int size);
    probe st__clear__entry(long bins, long entries, long memsize);
    probe st__clear__return(long bins, long entries, long memsize);
    probe st__free__entry(long bins, long entries, long memsize);
    probe st__free__return(long bins, long entries, long memsize);
    probe st__copy__entry(long bins, long entries, long memsize);
    probe st__copy__return(long bins, long entries, long memsize);
    probe st__cleanup__safe__entry(long bins, long entries, long memsize, long never);
    probe st__cleanup__safe__return(long bins, long entries, long memsize, long never);
    probe st__delete__entry(long bins, long entries, long memsize, long key, long value);
    probe st__delete__return(long bins, long entries, long memsize, long key, long value);
    probe st__delete__safe__entry(long bins, long entries, long memsize, long key, long value, long never);
    probe st__delete__safe__return(long bins, long entries, long memsize, long key, long value, long never);
    probe st__insert__entry(long bins, long entries, long memsize, long key, long value);
    probe st__insert__return(long bins, long entries, long memsize, long key, long value);
    probe st__insert2__entry(long bins, long entries, long memsize, long key, long value);
    probe st__insert2__return(long bins, long entries, long memsize, long key, long value);
    probe st__lookup__entry(long bins, long entries, long memsize, long key, long value);
    probe st__lookup__return(long bins, long entries, long memsize, long key, long value);
    probe st__add__direct__entry(long bins, long entries, long memsize, long key, long value);
    probe st__add__direct__return(long bins, long entries, long memsize, long key, long value);
    probe st__get__key__entry(long bins, long entries, long memsize, long key);
    probe st__get__key__return(long bins, long entries, long memsize, long key);

    probe obj__clone__entry(char *class);
    probe obj__clone__return(char *class);
    probe obj__dup__entry(char *class);
    probe obj__dup__return(char *class);
    probe obj__inspect__entry(char *class);
    probe obj__inspect__return(char *class);
    probe obj__instance__of__entry(char *class, char *oclass);
    probe obj__instance__of__return(char *class, char *oclass);
    probe obj__kind__of__entry(char *class, char *oclass);
    probe obj__kind__of__return(char *class, char *oclass);
    probe obj__freeze__entry(char *class);
    probe obj__freeze__return(char *class);
    probe obj__frozen__entry(char *class);
    probe obj__frozen__return(char *class);

    probe mod__initialize__entry(char *class);
    probe mod__initialize__return(char *class);
    probe class__initialize__entry(char *class);
    probe class__initialize__return(char *class);
    probe obj__alloc__entry(char *class);
    probe obj__alloc__return(char *class);
    probe class__superclass__entry(char *class);
    probe class__superclass__return(char *class);

    probe mod__const__get__entry(char *class);
    probe mod__const__get__return(char *class);
    probe mod__const__set__entry(char *class, char *const, char *val);
    probe mod__const__set__return(char *class, char *const, char *val);
    probe mod__const__defined__entry(char *class);
    probe mod__const__defined__return(char *class);

    probe obj__methods__entry(char *class);
    probe obj__methods__return(char *class);
    probe obj__private__methods__entry(char *class);
    probe obj__private__methods__return(char *class);
    probe obj__public__methods__entry(char *class);
    probe obj__public__methods__return(char *class);
    probe obj__protected__methods__entry(char *class);
    probe obj__protected__methods__return(char *class);

    probe obj__ivar__get__entry(char *class, char *var);
    probe obj__ivar__get__return(char *class, char *var);
    probe obj__ivar__set__entry(char *class, char *var, char *val);
    probe obj__ivar__set__return(char *class, char *var, char *val);
    probe obj__ivar__defined__entry(char *class, char *var);
    probe obj__ivar__defined__return(char *class, char *var);

    probe mod__cvar__get__entry(char *class, char *var);
    probe mod__cvar__get__return(char *class, char *var);
    probe mod__cvar__set__entry(char *class, char *var, char *val);
    probe mod__cvar__set__return(char *class, char *var, char *val);
    probe mod__cvar__defined__entry(char *class, char *var);
    probe mod__cvar__defined__return(char *class, char *var);

    probe convert__type__entry(char *class, char *type, char *method);
    probe convert__type__return(char *class, char *type, char *method);
    probe coerce__integer__entry(char *class);
    probe coerce__integer__return(char *class);
    probe coerce__float__entry(char *class);
    probe coerce__float__return(char *class);
    probe coerce__string__entry(char *class);
    probe coerce__string__return(char *class);
    probe coerce__array__entry(char *class);
    probe coerce__array__return(char *class);

    probe mem__xfree__entry();
    probe mem__xfree__return();
    probe mem__xmalloc__entry(long size);
    probe mem__xmalloc__return(long size);
    probe mem__xrealloc__entry(long size);
    probe mem__xrealloc__return(long size);
    probe mem__xmalloc2__entry(long slots, long size);
    probe mem__xmalloc2__return(long slots, long size);
    probe mem__xcalloc__entry(long slots, long size);
    probe mem__xcalloc__return(long slots, long size);
    probe mem__xcalloc2__entry(long slots, long size);
    probe mem__xcalloc2__return(long slots, long size);

    probe gc__objspace__alloc__entry();
    probe gc__objspace__alloc__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__objspace__free__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__objspace__free__return();
    probe gc__is__pointer__to__heap__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer);
    probe gc__is__pointer__to__heap__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer);
    probe gc__obj__free__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, char *class);
    probe gc__obj_free__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, char *class);
    probe gc__garbage__collect__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__garbage_collect__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__sweep__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__sweep__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__free__unused__heaps__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__free__unused__heaps__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__add__freelist__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer);
    probe gc__add__freelist__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer);
    probe gc__mark__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer, int level);
    probe gc__mark__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer, int level);
    probe gc__mark__children__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer, int level);
    probe gc__mark__children__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count, void *pointer, int level);
    probe gc__heaps__increment__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__heaps__increment__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__assign__heap__slot__entry(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);
    probe gc__assign__heap__slot__return(long malloc_limit, long malloc_increase, long heap_increment, long heap_length, long heap_used, unsigned int count);

    probe rb__trace__entry(char *id);
    probe rb__trace__return(char *id);

    probe fiber__mark__entry(char *class, int status);
    probe fiber__mark__return(char *class, int status);
    probe fiber__free__entry(char *class, int status);
    probe fiber__free__return(char *class, int status);
    probe fiber__switch__entry(char *class, int status);
    probe fiber__switch__return(char *class, int status);
    probe fiber__start__entry(char *class, int status);
    probe fiber__start__return(char *class, int status);
    probe fiber__terminate__entry(char *class, int status);
    probe fiber__terminate__return(char *class, int status);

    probe proc__mark__entry(void *pointer);
    probe proc__mark__return(void *pointer);
    probe proc__free__entry(void *pointer);
    probe proc__free__return(void *pointer);
    probe proc__dup__entry(char *class);
    probe proc__dup__return(char *class);
    probe binding__mark__entry(void *pointer);
    probe binding__mark__return(void *pointer);
    probe binding__free__entry(void *pointer);
    probe binding__free__return(void *pointer);
    probe binding__dup__entry(char *class);
    probe binding__dup__return(char *class);
    probe binding__new__entry();
    probe binding__new__return();
    probe proc__new__entry(char *class,int lambda);
    probe proc__new__return(char *class,int lambda);
    probe proc__call__entry(char *class);
    probe proc__call__return(char *class,char *class1);

    probe ins__getlocal__entry(unsigned long);
    probe ins__getlocal__return(char *class);
    probe ins__setlocal__entry(unsigned long,char *class);
    probe ins__setlocal__return();
    probe ins__getdynamic__entry(unsigned long,unsigned long);
    probe ins__getdynamic__return(char *class);
    probe ins__setdynamic__entry(unsigned long,unsigned long,char *class);
    probe ins__setdynamic__return();
    probe ins__getinlinecache__entry(long dst);
    probe ins__getinlinecache__return(char *class);
    probe ins__onceinlinecache__entry(long dst);
    probe ins__onceinlinecache__return(char *class);
    probe ins__setinlinecache__entry(long dst, char *class);
    probe ins__setinlinecache__return(char *class);
    probe ins__opt__case__dispatch__entry(long dst, long else_offset, char *class);
    probe ins__opt__case__dispatch__return();
    probe ins__opt__checkenv__entry();
    probe ins__opt__checkenv__return();
    probe ins__opt__plus__entry(char *receiver, char *obj);
    probe ins__opt__plus__return(char *class);
    probe ins__opt__minus__entry(char *receiver, char *obj);
    probe ins__opt__minus__return(char *class);
    probe ins__opt__mult__entry(char *receiver, char *obj);
    probe ins__opt__mult__return(char *class);
    probe ins__opt__div__entry(char *receiver, char *obj);
    probe ins__opt__div__return(char *class);
    probe ins__opt__mod__entry(char *receiver, char *obj);
    probe ins__opt__mod__return(char *class);
    probe ins__opt__eq__entry(char *receiver, char *obj);
    probe ins__opt__eq__return(char *class);
    probe ins__opt__neq__entry(char *receiver, char *obj);
    probe ins__opt__neq__return(char *class);
    probe ins__opt__lt__entry(char *receiver, char *obj);
    probe ins__opt__lt__return(char *class);
    probe ins__opt__le__entry(char *receiver, char *obj);
    probe ins__opt__le__return(char *class);
    probe ins__opt__gt__entry(char *receiver, char *obj);
    probe ins__opt__gt__return(char *class);
    probe ins__opt__ge__entry(char *receiver, char *obj);
    probe ins__opt__ge__return(char *class);
    probe ins__opt__ltlt__entry(char *receiver, char *obj);
    probe ins__opt__ltlt__return(char *class);
    probe ins__opt__aref__entry(char *receiver, char *obj);
    probe ins__opt__aref__return(char *class);
    probe ins__opt__aset__entry(char *receiver, char *obj, char *set);
    probe ins__opt__aset__return(char *class);
    probe ins__opt__length__entry(char *receiver);
    probe ins__opt__length__return(char *class);
    probe ins__opt__size__entry(char *receiver);
    probe ins__opt__size__return(char *class);
    probe ins__opt__succ__entry(char *receiver);
    probe ins__opt__succ__return(char *class);
    probe ins__opt__not__entry(char *receiver);
    probe ins__opt__not__return(char *class);
    probe ins__opt__call__c__function__entry();
    probe ins__opt__call__c__function__return();
    probe ins__opt__check__env__entry();
    probe ins__opt__check__env__return();
    probe ins__opt__regexpmatch1__entry(char *class1, char *class2);
    probe ins__opt__regexpmatch1__return(char *class);
    probe ins__opt__regexpmatch2__entry(char *class1, char *class2);
    probe ins__opt__regexpmatch2__return(char *class);
};

#pragma D attributes Evolving/Evolving/Common provider ruby provider
#pragma D attributes Private/Private/Common provider ruby module
#pragma D attributes Private/Private/Common provider ruby function
#pragma D attributes Evolving/Evolving/Common provider ruby name
#pragma D attributes Evolving/Evolving/Common provider ruby args